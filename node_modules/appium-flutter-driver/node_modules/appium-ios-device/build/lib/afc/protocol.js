"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileModes = exports.errorCode = exports.Errors = exports.operationCode = exports.Operations = exports.AFC_PACKET_HEADER_SIZE = exports.MAGIC_NUMBER = void 0;
const lodash_1 = __importDefault(require("lodash"));
const MAGIC_NUMBER = Buffer.from('CFA6LPAA');
exports.MAGIC_NUMBER = MAGIC_NUMBER;
const AFC_PACKET_HEADER_SIZE = 40;
exports.AFC_PACKET_HEADER_SIZE = AFC_PACKET_HEADER_SIZE;
const Operations = {
    INVALID: 0x00000000,
    STATUS: 0x00000001,
    DATA: 0x00000002,
    READ_DIR: 0x00000003,
    READ_FILE: 0x00000004,
    WRITE_FILE: 0x00000005,
    WRITE_PART: 0x00000006,
    TRUNCATE: 0x00000007,
    REMOVE_PATH: 0x00000008,
    MAKE_DIR: 0x00000009,
    GET_FILE_INFO: 0x0000000A,
    GET_DEVINFO: 0x0000000B,
    WRITE_FILE_ATOM: 0x0000000C,
    FILE_OPEN: 0x0000000D,
    FILE_OPEN_RES: 0x0000000E,
    FILE_READ: 0x0000000F,
    FILE_WRITE: 0x00000010,
    FILE_SEEK: 0x00000011,
    FILE_TELL: 0x00000012,
    FILE_TELL_RES: 0x00000013,
    FILE_CLOSE: 0x00000014,
    FILE_SET_SIZE: 0x00000015,
    GET_CON_INFO: 0x00000016,
    SET_CON_OPTIONS: 0x00000017,
    RENAME_PATH: 0x00000018,
    SET_FS_BS: 0x00000019,
    SET_SOCKET_BS: 0x0000001A,
    FILE_LOCK: 0x0000001B,
    MAKE_LINK: 0x0000001C,
    GET_FILE_HASH: 0x0000001D,
    SET_FILE_MOD_TIME: 0x0000001E,
    GET_FILE_HASH_RANGE: 0x0000001F,
    FILE_SET_IMMUTABLE_HINT: 0x00000020,
    GET_SIZE_OF_PATH_CONTENTS: 0x00000021,
    REMOVE_PATH_AND_CONTENTS: 0x00000022,
    DIR_OPEN: 0x00000023,
    DIR_OPEN_RESULT: 0x00000024,
    DIR_READ: 0x00000025,
    DIR_CLOSE: 0x00000026,
    FILE_READ_OFFSET: 0x00000027,
    FILE_WRITE_OFFSET: 0x00000028 // FileRefWriteWithOffset
};
exports.Operations = Operations;
const Operations_Code = lodash_1.default.invert(Operations);
function operationCode(code) {
    return Operations_Code[code];
}
exports.operationCode = operationCode;
const Errors = {
    SUCCESS: 0,
    UNKNOWN: 1,
    INVALID_HEADER: 2,
    NO_RESOURCES: 3,
    READ: 4,
    WRITE: 5,
    UNKNOWN_PACKET_TYPE: 6,
    INVALID_ARGUMENT: 7,
    OBJECT_NOT_FOUND: 8,
    OBJECT_IS_DIRECTORY: 9,
    PERMISSION_DENIED: 10,
    NOT_CONNECTED: 11,
    TIMEOUT: 12,
    OVERRUN: 13,
    EOF: 14,
    UNSUPPORTED: 15,
    OBJECT_EXISTS: 16,
    OBJECT_BUSY: 17,
    ON_SPACE_LEFT: 18,
    WOULD_BLOCK: 19,
    IO: 20,
    INTERRUPTED: 21,
    IN_PROGRESS: 22,
    INTERNAL: 23,
};
exports.Errors = Errors;
const Errors_Code = lodash_1.default.invert(Errors);
function errorCode(code) {
    return Errors_Code[code];
}
exports.errorCode = errorCode;
const FileModes = {
    'r': 0x00000001,
    'r+': 0x00000002,
    'w': 0x00000003,
    'w+': 0x00000004,
    'a': 0x00000005,
    'a+': 0x00000006, // O_RDWR   | O_APPEND | O_CREAT
};
exports.FileModes = FileModes;
//# sourceMappingURL=protocol.js.map