declare namespace _default {
    export { frameDetached };
    export { pageLoad };
    export { cancelPageLoad };
    export { pageUnload };
    export { waitForDom };
    export { checkPageIsReady };
    export { navToUrl };
    export { waitForFrameNavigated };
}
export default _default;
export type TPageLoadVerifyHook = (() => Promise<any> | void) | undefined;
/**
 * @typedef {(() => Promise<any>|void)|undefined} TPageLoadVerifyHook
 */
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @returns {void}
 */
declare function frameDetached(this: import("../remote-debugger").default): void;
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {timing.Timer?} startPageLoadTimer
 * @param {TPageLoadVerifyHook} [pageLoadVerifyHook]
 * @returns {Promise<void>}
 */
declare function pageLoad(this: import("../remote-debugger").default, startPageLoadTimer: timing.Timer | null, pageLoadVerifyHook?: TPageLoadVerifyHook): Promise<void>;
declare class pageLoad {
    /**
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {timing.Timer?} startPageLoadTimer
     * @param {TPageLoadVerifyHook} [pageLoadVerifyHook]
     * @returns {Promise<void>}
     */
    constructor(this: import("../remote-debugger").default, startPageLoadTimer: timing.Timer | null, pageLoadVerifyHook?: TPageLoadVerifyHook);
    pageLoading: boolean;
    pageLoadDelay: B<any>;
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @returns {void}
 */
declare function cancelPageLoad(this: import("../remote-debugger").default): void;
declare class cancelPageLoad {
    pageLoading: boolean;
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @returns {Promise<void>}
 */
declare function pageUnload(this: import("../remote-debugger").default): Promise<void>;
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {timing.Timer|null|undefined} startPageLoadTimer
 * @param {TPageLoadVerifyHook} [pageLoadVerifyHook]
 * @returns {Promise<void>}
 */
declare function waitForDom(this: import("../remote-debugger").default, startPageLoadTimer: timing.Timer | null | undefined, pageLoadVerifyHook?: TPageLoadVerifyHook): Promise<void>;
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @returns {Promise<boolean>}
 */
declare function checkPageIsReady(this: import("../remote-debugger").default): Promise<boolean>;
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {string} url
 * @param {TPageLoadVerifyHook} [pageLoadVerifyHook]
 * @returns {Promise<void>}
 */
declare function navToUrl(this: import("../remote-debugger").default, url: string, pageLoadVerifyHook?: TPageLoadVerifyHook): Promise<void>;
declare class navToUrl {
    /**
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {string} url
     * @param {TPageLoadVerifyHook} [pageLoadVerifyHook]
     * @returns {Promise<void>}
     */
    constructor(this: import("../remote-debugger").default, url: string, pageLoadVerifyHook?: TPageLoadVerifyHook);
    _navigatingToPage: boolean;
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @returns {Promise<any>}
 */
declare function waitForFrameNavigated(this: import("../remote-debugger").default): Promise<any>;
declare class waitForFrameNavigated {
    allowNavigationWithoutReload: boolean;
    navigationDelay: B<any>;
}
import { timing } from '@appium/support';
import B from 'bluebird';
//# sourceMappingURL=navigate.d.ts.map